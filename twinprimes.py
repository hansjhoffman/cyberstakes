#!/usr/bin/env python
from Crypto.Util.number import inverse, long_to_bytes
from math import floor, sqrt

if __name__ == "__main__":
    pub, flag_enc = ((119230477961913198138000696939076675510968431343174317714604666585419414708360238354050598505401830639541147330009097521035390662964433194072584609965873123039291825949659755467795285405574611043500448144859410619753438872829377261885959614452027257175540770201364560294484569773561768559067631689991581688383, 65537), 7070483790213779112350970237318498620281719782515615318930707148770159988241804751014044667233783231046981124381774320602820401663700882932997005797454728525556275520804811487430407961180699341184690072212171389615804379191199140627022716875298055386303227424654337456967159371412081976765005733201768169095)
    n, e = pub
    #p, q = None, None
    print "[-] Using public key: {}\n".format(pub)
    
    _n = int(floor(sqrt(n)))
    if _n % 2 == 0: _n -= 1
    print "[-] Finding twin primes...Starting at sqrt(n)={}\n".format(_n)
    p, q = _n - 1, _n + 1
    while True:
        if n % p == 0 or n % q == 0:
            break
        else:
            p -= 1
            q += 1

    print "[+] Pair found!\n**{}\n**{}\n".format(p, q)

    print "[-] Decrypting message...\n"
    phi = (p - 1) * (q - 1)
    d = inverse(e, phi)
    flag = pow(flag_enc, d, n)
    print "[+] Your flag is: {}".format(long_to_bytes(flag))
